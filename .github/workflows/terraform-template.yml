name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment name (e.g., prod, staging)"
      working_directory:
        required: true
        type: string
        description: "Directory containing Terraform files"
    secrets:
      inherit: true # This allows passing all secrets from the caller workflow

jobs:
  terraform-fmt:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform fmt check
        run: terraform fmt -check -recursive ${{ inputs.working_directory }}
        continue-on-error: false

  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ inputs.working_directory }}
        run: terraform plan -no-color
        env:
          TF_VAR_: ${{ toJSON(secrets) }} # This automatically passes all secrets with TF_VAR_ prefix

  terraform-apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ inputs.working_directory }}
        run: terraform apply -auto-approve -no-color
        env:
          TF_VAR_: ${{ toJSON(secrets) }} # This automatically passes all secrets with TF_VAR_ prefix
